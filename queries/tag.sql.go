// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: tag.sql

package queries

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
)

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const findTagById = `-- name: FindTagById :one
SELECT id, name, created_at, updated_at
FROM tags
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindTagById(ctx context.Context, id uuid.UUID) (Tag, error) {
	row := q.db.QueryRowContext(ctx, findTagById, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const indexTags = `-- name: IndexTags :many
SELECT id, name, created_at, updated_at
FROM tags
ORDER BY id
`

func (q *Queries) IndexTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, indexTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTag = `-- name: InsertTag :exec
INSERT INTO tags(id, name, created_at, updated_at)
VALUES ($1, $2, $3, $4)
`

type InsertTagParams struct {
	ID        uuid.UUID
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) InsertTag(ctx context.Context, arg InsertTagParams) error {
	_, err := q.db.ExecContext(ctx, insertTag,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
SET name = $2, updated_at = $3
WHERE id = $1
`

type UpdateTagParams struct {
	ID        uuid.UUID
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag, arg.ID, arg.Name, arg.UpdatedAt)
	return err
}
